# -*- coding: utf-8 -*-
"""Chord

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10de7Hz4dQ7QRvs5zm6y30h8zQm3ga_J_
"""

import hashlib
import random

# Kích thước không gian định danh (2^m)
m = 6

def hash_key(key):
    """Hàm băm trả về giá trị trong không gian m-bit."""
    return int(hashlib.sha1(str(key).encode()).hexdigest(), 16) % (2**m)

class Node:
    def __init__(self, node_id):
        self.id = node_id
        self.successor = None

    def find_successor(self, key_id):
        """Tìm node chịu trách nhiệm cho một khóa."""
        # Nếu key nằm giữa node hiện tại và successor
        if self.id < key_id <= self.successor.id:
            return self.successor
        # Nếu vòng tròn quay lại (id successor nhỏ hơn node)
        elif self.id > self.successor.id and (key_id > self.id or key_id <= self.successor.id):
            return self.successor
        else:
            # Chuyển tiếp yêu cầu đến successor
            return self.successor.find_successor(key_id)

import hashlib
import random

# Kích thước không gian định danh (2^m)
m = 6

def hash_key(key):
    """Hàm băm trả về giá trị trong không gian m-bit."""
    # This function is not used for testing fixed IDs, but is kept for context
    return int(hashlib.sha1(str(key).encode()).hexdigest(), 16) % (2**m)

class Node:
    def __init__(self, node_id):
        self.id = node_id
        self.successor = None

    def find_successor(self, key_id):
        """Tìm node chịu trách nhiệm cho một khóa."""
        # Nếu key nằm giữa node hiện tại và successor
        if self.id < key_id <= self.successor.id:
            return self.successor
        # Nếu vòng tròn quay lại (id successor nhỏ hơn node)
        elif self.id > self.successor.id and (key_id > self.id or key_id <= self.successor.id):
            return self.successor
        else:
            # Chuyển tiếp yêu cầu đến successor
            return self.successor.find_successor(key_id)

def create_ring(node_ids):
    """Tạo vòng tròn Chord từ danh sách ID đã cho."""
    sorted_ids = sorted(node_ids)
    nodes = [Node(i) for i in sorted_ids]
    for i in range(len(nodes)):
        nodes[i].successor = nodes[(i + 1) % len(nodes)]
    return nodes, nodes[0]

def test_case(case_name, nodes, start_node_id, key_id, expected_id):
    """Hàm chạy một kịch bản kiểm thử tìm kiếm với ID khóa cố định."""
    start_node = next((n for n in nodes if n.id == start_node_id), None)
    if not start_node:
        print(f"Lỗi: Không tìm thấy node bắt đầu có ID {start_node_id}")
        return

    print(f"----------------------------------------------------")
    print(f"Test Case: {case_name}")
    print(f"  - Nodes trong vòng: {[n.id for n in nodes]}")
    print(f"  - Key ID: {key_id}")
    print(f"  - Bắt đầu tìm kiếm từ node: {start_node.id}")

    actual_succ = start_node.find_successor(key_id)

    print(f"  - Kết quả thực tế: Key được lưu tại node {actual_succ.id}")
    print(f"  - Kết quả kỳ vọng: Key được lưu tại node {expected_id}")

    if actual_succ.id == expected_id:
        print("  ✅ PASS: Kết quả khớp với kỳ vọng!")
    else:
        print("  ❌ FAIL: Kết quả không khớp với kỳ vọng.")

if __name__ == "__main__":
    # Tạo vòng tròn ban đầu với các ID cố định để đảm bảo kết quả nhất quán
    node_ids = [7, 23, 40, 52, 60]
    nodes, _ = create_ring(node_ids)

    # Chạy từng test case với ID khóa đã cố định

    # Test 1: Key nằm giữa node và successor
    test_case(
        "1. Key nằm giữa node và successor",
        nodes,
        start_node_id=7,
        key_id=30,  # Cố định ID của key
        expected_id=40
    )

    # Test 2: Key nhỏ hơn tất cả node
    test_case(
        "2. Key nhỏ hơn tất cả node",
        nodes,
        start_node_id=60,
        key_id=5,  # Cố định ID của key
        expected_id=7
    )

    # Test 3: Key lớn hơn tất cả node
    test_case(
        "3. Key lớn hơn tất cả node",
        nodes,
        start_node_id=40,
        key_id=63,  # Cố định ID của key
        expected_id=7
    )

    # Test 4: Key trùng ID với node
    test_case(
        "4. Key trùng ID với node",
        nodes,
        start_node_id=7,
        key_id=40,  # Cố định ID của key
        expected_id=40
    )

    # Test 5: Lookup bắt đầu từ node khác
    test_case(
        "5. Lookup bắt đầu từ node khác",
        nodes,
        start_node_id=52,
        key_id=18,  # Cố định ID của key
        expected_id=23
    )